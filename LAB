//From https://www.programmingalgorithms.com/algorithm/hsl-to-rgb?lang=C
typedef struct RGB {
    unsigned char R;
    unsigned char G;
    unsigned char B;
} rgb_t;

typedef struct HSL {
    int H;
    float S;
    float L;
} hsl_t;

float HueToRGB(float v1, float v2, float vH) {
    if (vH < 0)
        vH += 1;

    if (vH > 1)
        vH -= 1;

    if ((6 * vH) < 1)
        return (v1 + (v2 - v1) * 6 * vH);

    if ((2 * vH) < 1)
        return v2;

    if ((3 * vH) < 2)
        return (v1 + (v2 - v1) * ((2.0f / 3) - vH) * 6);

    return v1;
}

struct RGB HSLToRGB(struct HSL hsl) {
    struct RGB rgb;

    if (hsl.S == 0) {
        rgb.R = rgb.G = rgb.B = (unsigned char) (hsl.L * 255);
    } else {
        float v1, v2;
        float hue = (float) hsl.H / 360;

        v2 = (hsl.L < 0.5) ? (hsl.L * (1 + hsl.S)) : ((hsl.L + hsl.S) - (hsl.L * hsl.S));
        v1 = 2 * hsl.L - v2;

        rgb.R = (unsigned char) (255 * HueToRGB(v1, v2, hue + (1.0f / 3)));
        rgb.G = (unsigned char) (255 * HueToRGB(v1, v2, hue));
        rgb.B = (unsigned char) (255 * HueToRGB(v1, v2, hue - (1.0f / 3)));
    }

    return rgb;
}


void LED_init() {
    T2CLKCON = 0x01; //configure Timer 2's clock source to Fosc/4
    T2CONbits.ON = 1; // turn on Timer2

    // red @ CCP1 on C7
    CCP1CONbits.CCP1EN = 1;
    CCP1CONbits.MODE = 0b1100;
    RC7PPS = 0x09;
    TRISC7 = 0;

    //Green @ CCP2 on C6
    CCP2CONbits.CCP2EN = 1;
    CCP2CONbits.MODE = 0b1100;
    RC6PPS = 0x0A;
    TRISC6 = 0;

    //Blue @ CCP3 on C3
    CCP3CONbits.CCP3EN = 1;
    CCP3CONbits.MODE = 0b1100;
    RC3PPS = 0x0B;
    TRISC3 = 0;

    //White @ CCP4 on C4
    CCP4CONbits.CCP4EN = 1;
    CCP4CONbits.MODE = 0b1100;
    RC4PPS = 0x0C;
    TRISC4 = 0;

    CCPR1H = 0x00;
    CCPR2H = 0x00;
    CCPR3H = 0x00;
    CCPR4H = 0x00;
}

void LED_setBrightness(uint16_t val) {
    CCPR1H = val >> 8;
    CCPR1L = val & 0xFF;

}

void LED_setColor(uint8_t Red, uint8_t Green, uint8_t Blue, uint8_t White) {
    CCPR1L = Red >> 1;
    CCPR2L = Green >> 1;
    CCPR3L = Blue >> 1;
    CCPR4L = White >> 1;
}

void colors() {
    hsl_t hsl;
    hsl.H = 0;
    hsl.L = 0.5;
    hsl.S = 1.0;
    while (1) {
        // pulse white LED
        for (int i = 0; i < 10; i++) {
            LED_setColor(255, 255, 255, 255); //White on
            __delay_ms(5);
            LED_setColor(0, 0, 0, 0); //White off
            __delay_ms(100);
        }
        for (int i = 0; i < 10; i++) {

            LED_setColor(255, 0, 0, 0); // Red
            __delay_ms(50);
            LED_setColor(0, 255, 0, 0); // Green
            __delay_ms(50);
            LED_setColor(0, 0, 255, 0); // Blue
            __delay_ms(50);
        }
        for (int i = 0; i < 360; i++) {
            hsl.H = i;
            rgb_t rgb = HSLToRGB(hsl);

            LED_setColor(rgb.R, rgb.G, rgb.B, 0);

            if (hsl.H == 120 || hsl.H == 240 || hsl.H == 360)
                __delay_ms(1000);

            __delay_ms(10);
        }
    }
}

void main() {
    LED_init();
    colors();
}
