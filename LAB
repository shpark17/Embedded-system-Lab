#define _XTAL_FREQ 4000000
#include <xc.h>
#pragma config WDTE = OFF
#include <stdint.h>
#include <string.h>
#include<stdio.h>

void part1() {
    TRISC = 0xFE; //Make RC0 an output everything else input
    while (1) {
        LATC = 0x01; //Make RC0 output
        __delay_ms(50);
        LATC = 0x00; //Make RC0 input
        __delay_ms(50);
    }
}

void part2() {
    TRISC0 = 0; //Make RC6 an output everything else input
    while (1) {
        LATC0 = 0; //Make RC6 output
        LATC0 = 1; //Make RC6 input
    }
}

void part3() {
    TRISC = 0x00; // make all pins on port C outputs
    while (1) {
        LATC++;
        __delay_ms(100);
    }
}

void part4() {
    TRISC = 0xDF; //Make RC5 an output everything else input
    while (1) {
        LATC = 0x20; //Make RC5 output
        __delay_ms(50);
        LATC = 0x00; //Make RC5 input
        __delay_ms(50);
    }
}

void printStringToPort(char* string) {
    uint8_t len = strlen(string) + 1; // send the null character, too
    uint8_t i;
    for (i = 0; i < len; i++) {
        LATC = string[i]; // write the character's ASCII code to the GPIO port
        LATC7 = 1; // pulse RC7 high
        LATC7 = 0; // ... and low again
    }
}

void part5() {
    TRISC = 0x00; // make all pins on port C outputs

    char myString[] = "Hello, world!";
    printStringToPort(myString);
}

void part6() {
    WPUB6 = 1;
    TRISB = 0x40; //Make RB6 an input
    ANSB6 = 0; //Make RB6 schimitt trigger = 0
    TRISC = 0xFE; //Make RC0 output
    while (1) {
        RC0 = RB6;
    }
}

void part7() {
    WPUB6 = 1;
    TRISB = 0x40; //Make RB6 an input
    ANSB6 = 0; //Make RB6 schimitt trigger = 0
    TRISC = 0xFE; //Make RC0 output
    int pushCount = 0;
    while (1) {
        RC0 = RB6;
        while (RB6 == 0);
        pushCount++;
        __delay_ms(10);
        while (RB6 == 1);
    }
}

void part8() {
    TRISC = 0xFF;
    TRISB = 0x00;
    WPUC = 0xFF;
    ANSELC = 0;
    while (1) {
        int i = 0;
        if (PORTC == 0xFF) {
            LATB = 0;
        }
        for (i = 0; i <= 7; i++) {
            if (!((PORTC << i) & (0x80))) {
                LATB = ((7 - i) << 4) | 0x80;
                break;
            }
        }
    }
}

void BarGraph_init() {
    TRISC = 0x00;
    LATC = 0x00;
}

void BarGraph_writeValue(uint8_t val) {
    uint8_t newVal = 0;

    for (uint8_t i = 0; i < (val); i++) {
        newVal |= (0x01 << i);
    }
    LATC = newVal;
}

void ADC_init() {
    ADCLK = 1;
    ADCON0bits.CS = 1;
    ADCON0bits.FM = 1;
    ADPCH = 0b001111;
    TRISBbits.TRISB7 = 1;
    ANSELBbits.ANSB7 = 1;
    ADCON0bits.ON = 1;
}

uint16_t ADC_getValue() {
    ADCON0bits.GO = 1;
    while (ADCON0bits.GO);
    uint16_t result = (ADRESH << 8) | ADRESL;
    return result;
}

void main(void) {
  ADC_init();
  BarGraph_init();
  while (1) {
      int16_t val2 = (ADC_getValue()-480) ;
      if (val2 < 0) {
          val2 = 0;
      }
      BarGraph_writeValue(val2/15);
  }
}

void LED_init() {
    T2CLKCON = 0x01; //configure Timer 2's clock source to Fosc/4
    T2CONbits.ON = 1; // turn on Timer2

    // red @ CCP1 on C7
    CCP1CONbits.CCP1EN = 1;
    CCP1CONbits.MODE = 0b1100;
    RC7PPS = 0x09;
    TRISC7 = 0;

    //Green @ CCP2 on C6
    CCP2CONbits.CCP2EN = 1;
    CCP2CONbits.MODE = 0b1100;
    RC6PPS = 0x0A;
    TRISC6 = 0;

    //Blue @ CCP3 on C3
    CCP3CONbits.CCP3EN = 1;
    CCP3CONbits.MODE = 0b1100;
    RC3PPS = 0x0B;
    TRISC3 = 0;
    
    //White @ CCP4 on C4
    CCP4CONbits.CCP4EN = 1;
    CCP4CONbits.MODE = 0b1100;
    RC4PPS = 0x0C;
    TRISC4 = 0;

    CCPR1H = 0x00;
    CCPR2H = 0x00;
    CCPR3H = 0x00;
    CCPR4H = 0x00;
}

void LED_setBrightness(uint16_t val) {
    CCPR1H = val >> 8;
    CCPR1L = val & 0xFF;

}

void LED_setColor(uint8_t Red, uint8_t Green, uint8_t Blue, uint8_t White) {

    CCPR1L = Red >> 1;
    CCPR2L = Green >> 1;
    CCPR3L = Blue >> 1;
    CCPR4L = White >> 1;
}

void colors() {
    while(1) {
        LED_setColor(255,0,0,0); //Red
        __delay_ms(100);
        LED_setColor(0,255,0,0); //Green
        __delay_ms(100);
        LED_setColor(0,0,255,0); // Blue
        __delay_ms(100);
        LED_setColor(0,0,0,255); //White
        __delay_ms(100);
    }
}

void colors() {
    hsl_t hsl;
    hsl.H = 0;
    hsl.L = 0.5;
    hsl.S = 1.0;
    while (1) {
      
        hsl.H++;
      
        hsl.H = (hsl.H + 1) % 360;
        rgb_t rgb = HSLToRGB(hsl);

        LED_setColor(rgb.R, rgb.G, rgb.B, 0);

        if(hsl.H == 120 || hsl.H == 240 || hsl.H == 360)
            __delay_ms(1000);
        
        __delay_ms(10);
    }
}


void main() {
    uint16_t val;
    LED_init();
    ADC_init();
    colors();
//    while (1) {
//        LED_setColor(255, 255, 255, 255);
//    }
}
